// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  externalId    String     @unique // Clerk user ID
  email         String     @unique
  name          String?
  imageUrl      String?
  forms         Form[]
  workspaces    Workspace[]
  favorites     Favorite[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Workspace {
  id            String     @id @default(cuid())
  name          String
  emoji         String?
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  forms         Form[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Form {
  id            String     @id @default(cuid())
  title         String
  description   String?
  schema        Json?      // Stores the form schema
  published     Boolean    @default(false)
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId   String?
  workspace     Workspace? @relation(fields: [workspaceId], references: [id])
  responses     FormResponse[]
  isDeleted     Boolean    @default(false)
  deletedAt     DateTime?
  isInTrash     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model FormResponse {
  id            String     @id @default(cuid())
  data          Json
  formId        String
  form          Form       @relation(fields: [formId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Favorite {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  formId        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([userId, formId])
}
